---
- name: 'Define facts'
  set_fact:
    monit_unarchive_dir: '{{ monit_workspace }}/monit-{{ monit_version }}'
    monit_current_version: ''

- name: 'Get current monit version'
  command: monit --version
  register: monit_current_version_output
  changed_when: false
  ignore_errors: true

- name: 'Define monit_current_version variable'
  set_fact:
    monit_current_version: "{{ monit_current_version_output.stdout_lines[0] | replace('This is Monit version ', '') }}"
  when: monit_current_version_output.stdout_lines[0] is defined

- name: 'Output monit_version != monit_current_version'
  debug: msg="{{ monit_version }} != {{ monit_current_version }}"

- name: 'Create monit workspace'
  file:
    path: "{{ monit_workspace }}"
    state: directory
  when: monit_version != monit_current_version

#- name: 'Download monit'
#  get_url:
#    url: '{{monit_download_url }}'
#    dest: '{{ monit_workspace }}/monit-latest.tar.gz'
#  when: monit_version != monit_current_version
#
#- name: 'Unarchive monit-latest.tar.gz'
#  register: monit_unarchive
#  unarchive:
#    src: '{{ monit_workspace }}/monit-latest.tar.gz'
#    dest: '{{ monit_workspace }}/'
#    copy: no
#  when: monit_version != monit_current_version
#

- name: 'Unarchive monit-latest.tar.gz'
  register: monit_unarchive
  unarchive:
    src: '{{monit_download_url }}'
    dest: '{{ monit_workspace }}/'
    copy: no
  when: monit_version != monit_current_version

- name: 'Output monit_unarchive'
  debug: msg="{{ monit_unarchive }}"

- name: stop monit (if exists) in case of updates
  when: monit_unarchive.changed
  service:
    name: 'monit'
    state: stopped
  ignore_errors: true
  tags: ['skip_ansible_lint']

- name: 'Copy'
  command: cp -f {{ monit_unarchive_dir }}/bin/monit /usr/local/bin/monit
  when: monit_unarchive.changed
  tags: ['skip_ansible_lint']

- name: 'Set monit default'
  copy:
    src: etc/default/monit
    dest: /etc/default/monit
    owner: root
    group: root
    mode: 0644

- name: 'Set init script'
  copy:
    src: monit.initd
    dest: /etc/init.d/monit
    owner: root
    group: root
    mode: '0755'
  when: ansible_distribution == 'Ubuntu'

- name: 'Set upstart script'
  copy:
    src: monit.upstart
    dest: /etc/init/monit.conf
    owner: root
    group: root
    mode: '0644'
  notify: reload initctl
  when: ansible_distribution == 'Ubuntu'

- name: 'Set systemd unit file'
  copy:
    src: monit.service
    dest: /lib/systemd/system/monit.service
    owner: root
    group: root
    mode: '0644'
  notify: reload systemd
  when: ansible_distribution == 'Debian'

- name: Install ruby if slack notification requested
  apt:
    pkg: 'ruby'
    state: present
  when: monit_use_slack

- name: set slack script
  template:
    src: notify/slack.rb
    dest: "{{ monit_slack_script }}"
    owner: root
    group: root
    mode: 0755
  when: monit_use_slack
